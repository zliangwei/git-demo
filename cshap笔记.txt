ref,out

ArrayList的大小是按照其中存储的数据动态扩充与收缩的。声明时不需要指定长度。存储时使用object类型进行存储
集合与数组比较类似，都用于存放一组值
数组的优势：数组在内存中是连续存储的，所以索引速度非常快。
数组的劣势：①在数组的两个数据间插入数据很麻烦 ②在声明数组时，必须同时声明数组的长度，数组长度过长，会造成
内存浪费，过短，会造成数据溢出错误。

List解决了ArrayList类型安全问题，装箱拆箱的性能问题
每次new都会新开辟一片内存空间
List泛型的好处是通过指定泛型或方法操作的特定类型，减少了类型强制准换的需要和运行时错误的可能性，泛型提供了
类型安全，但没有增加开销。

字典
Dictionary<int,string> dictionary1=new Dictionary<int,string>();
dictionary1[1];  这里中括号里是键，不是索引
键与值可以是任何类型，但是键必须在设置时是唯一的，而值可以不位于。
使用Add()方法添加键值时，不可以添加已有键值

充血模型：既有属性又有方法。

平血模型：只有属性，没有方法。

里氏替换：父类可以接受子类的实例化对象，子类不能接受父类的

观察者模式：当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。
观察者模式的主要的作用就是对对象解耦，将观察者和被观察者完全隔离。
观察者模式的优点：
观察者模式解除了主题和具体观察者的耦合，让耦合的双方都依赖于抽象，而不是依赖具体。
观察者模式的缺点：
在应用观察者模式时需要考虑一下开发小路问题，程序中包括一个被观察者和多个被观察者，开发和调试比较复杂

sql注入：

iframe： 用于在一个页面中嵌入另一个页面
css选择器：
就近原则
style属性>id选择器>class选择器>Tag选择器
其他选择器：
父级 子集
#test span 将id为test的下标签为span的所有标签赋上值
#test>span 找到id为test的子集为span的标签
#test~div  找到id为test的他后面的所有div标签，
伪类选择器：
:honver 鼠标经过时设置样式
:active   鼠标点中时设置样式
:visited  

面相抽象即依赖倒置，接口就是抽象的，接口的作用：规范开发，多态,层间引用
,net framework全家桶似的，.net core 按需获取，组装似的

数据库中的DBNull和程序中的null不是一回事，如果为空要做相应的转化

IEnumerable是List的子类， 父类可以承接子类，子类不可承接父类

Application中的Local Storage相当于浏览器的一个数据库

逻辑主键
业务主键

csproj 项目文件的扩展名：
   C#项目文件的扩展名，它是“C Sharp Project”的缩写。.net 开发环境中建立项目时，
会产生 .csproj 文件，这是C#的工程文件，其中记录了与工程有关的相关信息，例如包含的文件，
程序的版本，所生成的文件的类型和位置的信息等。
   Visual Studio会根据csproj里的XML定义来管理项目文件以及相关其他一些种类非常丰富的数据及操作，
MSBuild也会根据csproj文件来得知编译这个项目需要有哪些依赖，默认输出路径。csproj存在的唯一意义：为
“开发环境”提供信息。

pop(Procedure Oriented Programming)面向过程编程
oop(Object Oriented Programming)面向对象编程
DDD(Domain Driven Design)领域驱动设计
POP-无边界  OOP-以对象为边界(被类束缚了)  DDD-扩大边界,将对象组装成领域，程序分析设计更轻松
DDD是一种程序分析设计方法，不关乎具体技术，具体代码实现，依旧是OOP和AOP


读写分离，主从复制

Task async await

nvachar字段长度是用多少，放多少的

表达式目录树
充血模型，平血模型
部分类 partial

vscode其实是一个网站

深拷贝，浅拷贝

class默认访问修饰符为interal 内部类，只有在同一命名空间下才可以使用

abstract方法必须在abstract类中,继承了abstract类必须要实现

js中的回调函数类似于c#委托

事件(eventDelegate)--观察者模式

dynamic

params修饰的参数长度可变，多个参数时放在最后

协变，逆变

多线程 Thread  前台线程后台线程
线程池 ThreadPool
多线程 Task ,await

==========================================
js&C#
let先声明再使用  ，有作用域只在当前语句块中生效
弱类型，强类型语言
const
lamda表达式实际就是一个方法体,委托就是一个方法
filter类似于c#中的Findall
some类似c#中的any
every类似于c#的all方法
includes类似于c#的contains
indexof()
concat()
push()数组尾部添加
unshift()头部添加
splice 既可以删除数据，也可以添加数据

js:
...表示扩展运算符放在最后  类似于 c#的param
闭包
